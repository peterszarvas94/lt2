[
  {
    "id": 0,
    "title": "Introduction",
    "excerpt": "The basics to get you started",
    "content": "Goals\n\nWrite your templates in go templ\nWrite your content in markdown\nGenerate static HTML\nServe HTML with go\n\nDependencies\n\ngo 1.22.5\nair\ntempl\nmake\n\nCommands\nDeveloment mode\n\nmake templ: start templ file generation in watch mode\nmake dev: start dev server with hot reload\n\nSSR (Server Side Rendering) mode\n\nmake build: build go binary\nmake ssr: start server\n\nSSG (Static Site Generation) mode\n\nmake gen: generate static files\n\nYou can put these static files to any server. You can serve them with\nlytepage as well:\n\nmake ssg: start static file server\n\nThemes\nYou can put you custom theme under the theme folder.\ntheme\n├── static\n└── templates\n\nPut static files like css, js, images etc. under theme/static.\nPut templ components under theme/templates.\nYou can use any other folder which you may need, like tailwind folder for\ngenerating tailwind css, or script folder for generating JavaScript from\nTypescript. The important this is to output the generated files to\ntheme/static, and link them at your pages \u0026lt;head\u0026gt; element.\nEvery theme should have the following templ components exported from the root\ndirectory of the theme, as you can see in the pages/page.go:\ntype (\n  NotFoundPage func() templ.Component\n  IndexPage    func(files []*fileutils.FileData) templ.Component\n  PostPage     func(post *fileutils.FileData) templ.Component\n  TagPage      func(tag string, files []*fileutils.FileData) templ.Component\n  CategoryPage func(category string, files []*fileutils.FileData) templ.Component\n)\n\nDefault theme\nThe default theme used for the lytepage\nsite, is included in this repo, under theme folder.\nSwitching themes\nTheme switching is a manual process for now, mabye should be improved in the\nfuture. Make sure to backup you old theme folder, or commit it to a version\ncontrol, before cloning or writing a new theme, since the old theme are not\nsaved anywhere else.\nContent\nYou should put your content in the content folder in any folder structure,\nusing .md files with frontmatter. There are protected routes which\nyou can not use, and it will cause the program to panic. These are the\nfollowing:\n\n/404\n/static\n/tag\n/category\n\nas well as any custom route you define.\nRoutes\nThe structure of the content folder is refcted in the actual routes\n(file-based routing). E.g: content/post/hello.md is served on /post/hello,\nboth in dev and SSR mode. In SSG mode, the generated folder structore is the\nsame, e.g. post/index.html, so it gets served correctly by any static file\nserver.\nStatic assets are served / generated similary from the theme/static folder.\n404\nThere is a custom 404 (not found) page rendered. In a custom file server or CDN,\nyou need to implement a catch-all logic, if you want to use this page, because\nthe content is static. If you serve static files via the built-in file server\nwith the make ssg command, this logic is already implemented.\nIn dev and SSR modes, catch-all logic is handled as well.\nIndex\nThe homepage displas the latest posts, like in other blog-styled frameworks. You\ncan define a custom index page of course.\nPost\nThe post page should display an individual article / post.\nContent is written in markdown, with some common extensions. The .md file\nshould start with the following frontmatter in yaml format:\ntitle: \u0026quot;Title\u0026quot;\ncategory: \u0026quot;category\u0026quot;\ntags: [\u0026quot;tag1\u0026quot;, \u0026quot;tag2\u0026quot;]\ndate: \u0026quot;2024.01.02\u0026quot;\ntime: \u0026quot;11:15\u0026quot;\nexcerpt: \u0026quot;This is an excrept from the article\u0026quot;\n\nThe date and datetime format can be configured in the pkg/config/config.go\nfile.\nThe files are parsed, routes are handled or files are generated as mentioned\nbefore. In your template, you can use the following struct for any article:\ntype FileData struct {\n  Fileroute string      `json:\u0026quot;fileroute\u0026quot;`\n  Matter    FrontMatter `json:\u0026quot;matter\u0026quot;`\n  DateTime  time.Time   `json:\u0026quot;datetime\u0026quot;`\n  Html      string      `json:\u0026quot;html\u0026quot;`\n  Content   string      `json:\u0026quot;content\u0026quot;`\n  Path      string      `json:\u0026quot;path\u0026quot;`\n}\n\ntype FrontMatter struct {\n  Title    string   `yaml:\u0026quot;title\u0026quot;`\n  Category string   `yaml:\u0026quot;category\u0026quot;`\n  Tags     []string `yaml:\u0026quot;tags\u0026quot;`\n  Date     string   `yaml:\u0026quot;date\u0026quot;`\n  Time     string   `yaml:\u0026quot;time\u0026quot;`\n  Excerpt  string   `yaml:\u0026quot;excerpt\u0026quot;`\n  Hidden   bool     `yaml:\u0026quot;hidden\u0026quot;`\n}\n\nIf you set hidden: true in the frontmatter, your file will not be generated or\nserved as usual, but you can still use the generated content anywhere in your\ntemplate. E.g. the index.md file is hidden, so it does not appear in the\narticle list, but the landing page uses it`s content. See\ncustom routes below.\nCategory\nA category page is generated, based on the frontmatter of the content files, for\nevery category.\nE.g.: content/hello.md has a frontmatter like this:\ncategory: \u0026quot;test\u0026quot;\n\nIn this case, a category page is generated and served on /category/test route\nin dev an SSR mode, or /category/test/index.html file is generated in SSG\nmode.\nTag\nSimilary to category pages, tag pages are generated based on frontmatter. One\nfile can be one category, but can have multiple tags.\ntags: [\u0026quot;tag1\u0026quot;, \u0026quot;tag2\u0026quot;]\n\nIn the above example, /tag/tag1 and /tag/tag2 pages are generated.\nCustom routes\nYou can define custom routes in pkg/custom/custom.go by adding element to the\nRoutes map:\nvar Routes = \u0026amp;routeMap{\n  \u0026quot;/\u0026quot;:       templates.CustomIndexPage(fileutils.GetFileByTitle(\u0026quot;index\u0026quot;)),\n  \u0026quot;/search\u0026quot;: templates.SearchPage(fileutils.GetFiles()),\n  \u0026quot;/docs\u0026quot;:   templates.PostsPage(fileutils.GetFiles()),\n}\n\nE.g. the landing page of lytepage site is a\ncustom route.\nSearch\nSince this is a static site generator, server-side seach is not supported. A\nstatic files.json file is generated from your files, so you can perform\nclient-side search with tools like minisearch, or any other way.\nTODO: files.json generation should be opt-in\n",
    "route": "/intro"
  },
  {
    "id": 1,
    "title": "TODO",
    "excerpt": "Way to prod",
    "content": "0.1\n\n category page\n upgrade tag page\n add github link somewhere\n add contact info and some about info\n custom routes and components\n custom home page opt-in\n killer home page\n documentations an tutorials\n update readme files (github and online)\n fix link for github readme\n include font and highligh js files, not as dependency but as vendor code\n\n0.2\n\n multilanguage\n search: json or google?\n seo things on frontmatter\n error handling\n accessibility\n rewrite search.js to typesript\n organize packages\n\n0.3\n\n rss ??\n xml site map???\n\n...\n1.0\n\n profit\n\n",
    "route": "/todo"
  },
  {
    "id": 2,
    "title": "About me",
    "excerpt": "",
    "content": "Hi there\nMy name is Péter Szarvas, I work as a freelancer, as a fullstack developer in\nHungray.\nFirst I stared with JavaScript/TypeScript and frontend frameworks like\nReact, Astro, I have built some projects with this stack. But over time my\ninterest is shifted to Go, and server driven, traditional server-client\napplications.\nThis interest led me to build lytepage, as an alternative to client-side\nframeworks, to have a simple tool to build static sites.\nThis very page you are visiting, is built using lytepage, as well as my\nwebsite, see below.\nContact\n\nwebsite\ngithub\nphone\nemail\nlinkedin\n\n",
    "route": "/author"
  }
]